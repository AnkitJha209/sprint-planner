// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          String          @id @default(uuid())
  firstName   String
  lastName    String
  email       String          @unique
  password    String
  username    String          @unique
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  memberships Membership[]
  workspaces  Workspace[]     @relation("WorkspaceOwner")
  ownedProjects Project[]     @relation("ProjectOwner")
  projectMembers ProjectMember[]
  tasksCreated  Task[]          @relation("TaskOwner")
  tasksAssigned Task[]          @relation("TaskAssignee")
}

model Workspace {
  id          String        @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  ownerId     String
  owner       User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  memberships Membership[]
  projects    Project[]
}

model Membership {
  id          String     @id @default(uuid())
  role        Role       @default(MEMBER)
  joinedAt    DateTime   @default(now())

  // Relations
  userId      String
  workspaceId String
  user        User       @relation(fields: [userId], references: [id])
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId]) // prevents duplicate membership
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  ownerId     String
  workspaceId String
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  tasks       Task[]
  members     ProjectMember[]
}

model ProjectMember {
  id         String     @id @default(uuid())
  role       ProjectRole @default(CONTRIBUTOR)
  joinedAt   DateTime   @default(now())

  // Relations
  userId     String
  projectId  String
  user       User       @relation(fields: [userId], references: [id])
  project    Project    @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId]) // prevent duplicate membership
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  projectId   String
  assigneeId  String?
  creatorId   String
  project     Project      @relation(fields: [projectId], references: [id])

  // Opposite relations
  assignee    User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])  // ðŸ‘ˆ FIX
  creator     User         @relation("TaskOwner", fields: [creatorId], references: [id])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum ProjectRole {
  MANAGER
  CONTRIBUTOR
  VIEWER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}